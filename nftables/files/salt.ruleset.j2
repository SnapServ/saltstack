{%- set _globals = {
  'inet_addr_sets': [],
} %}

{%- macro _block_wrap(_content, _prefix='', _suffix='') -%}
{%- if _content is sequence and _content|length > 0 -%}
{{- _prefix -}}{{- _content -}}{{- _suffix -}}
{%- endif -%}
{%- endmacro -%}

{%- macro _generate_set_internal(_name, _opts) %}
set {{ _name }} {
  type {{ _opts.type }}
  {%- if _opts.flags|length > 0 -%}
    ; flags {{ _opts.flags|join(', ') }}
  {%- endif %}

  {%- if _opts.elements|length > 0 %}
  elements = {
    {{ _opts.elements|join(',\n')|indent(4) }}
  }
  {%- endif %}
}
{%- endmacro -%}


{%- macro _generate_set(_name, _opts={}) %}
{%- do _opts.update(kwargs) %}
{%- do _opts.update({
  'elements': _opts.get('elements', []),
  'type': _opts.get('type', 'inet_addr'),
  'flags': _opts.get('flags', ['constant', 'interval']),
}) %}

{%- if _opts.type == 'inet_addr' %}
{%- do _globals.inet_addr_sets.append(name) %}
{{- _generate_set(_name ~ '4', type='ipv4_addr', elements=_opts.elements|ipv4) }}
{{- _generate_set(_name ~ '6', type='ipv6_addr', elements=_opts.elements|ipv6) }}
{%- else %}
{{- _generate_set_internal(_name, _opts) }}
{%- endif %}
{%- endmacro -%}


{%- macro _generate_rule(_rule) %}
{%- set _parsed_rules = {0: _rule} %}
{%- set _rewrite_rules = {
  'inet(\s+[sd]addr\s+@[^ ]+)( |$)': {
    0: 'ip\g<1>4\g<2>',
    1: 'ip6\g<1>6\g<2>',
  },
 } %}

{%- for _regex, _replacements in _rewrite_rules|dictsort %}
  {%- set _match = _rule|regex_match(_regex) %}
  {%- if _match is not none %}
    {%- for _index, _replacement in _replacements|dictsort %}
      {%- do _parsed_rules.update({
        _index: _rule|regex_replace(_regex, _replacement),
      }) %}
    {%- endfor %}
  {%- endif %}
{%- endfor %}

{%- set _parsed_rules = _parsed_rules.values() %}
{%- if _parsed_rules|length > 1 %}
  {%- for _parsed_rule in _parsed_rules %}
    {{- _block_wrap(_generate_rule(_parsed_rule), '\n') }}
  {%- endfor %}
{%- elif _parsed_rules|length == 1 %}
  {{- _parsed_rules[0] }}
{%- endif %}
{%- endmacro %}


{%- macro _generate_policy(_name, _opts={}) %}
{%- do _opts.update(kwargs) %}
{%- do _opts.update({
  'rules': _opts.get('rules', [])
}) %}

{%- if _opts.rules|length > 0 %}
# {{ _name }}
{% for _rule in _opts.rules %}
{{- _block_wrap(_generate_rule(_rule), '\n' if not loop.first else '') }}
{%- endfor %}
{%- endif %}
{%- endmacro -%}


{%- macro _generate_chain(_name, _opts={}) %}
{%- do _opts.update(kwargs) %}
{%- do _opts.update({
  'type': _opts.get('type', 'filter'),
  'hook': _opts.get('hook', 'input'),
  'priority': _opts.get('priority', 0),
  'policies': _opts.get('policies', {}),
}) %}

chain {{ _name }} {
  type {{ _opts.type }} hook {{ _opts.hook }} priority {{ _opts.priority }}

  {%- for _policy_name, _policy in _opts.policies|dictsort %}
  {%- set _policy = _policy if _policy is mapping else {'rules': _policy} -%}

  {{- _block_wrap(_generate_policy(_policy_name, **_policy)|indent(2), '\n') }}
  {%- endfor %}
}
{%- endmacro -%}


{%- macro _generate_family(_name, _opts={}) %}
{%- do _opts.update(kwargs) %}
{%- do _opts.update({
  'sets': _opts.get('sets', {}),
  'chains': _opts.get('chains', {}),
}) %}

{%- if (_opts.sets.keys()|length + _opts.chains.keys()|length) > 0 %}
table {{ _name }} saltstack {
  {%- for _set_name, _set in _opts.sets|dictsort %}
  {%- set _set = _set if _set is mapping else {'elements': _set} %}

  {%- if not loop.first %}{{ '\n' }}{%- endif %}
  {{- _generate_set(_set_name, **_set)|indent(2) }}
  {%- endfor %}

  {%- for _chain_name, _chain in _opts.chains|dictsort %}
  {{- _generate_chain(_chain_name, **_chain)|indent(2) }}
  {%- endfor %}
}
{%- endif %}
{%- endmacro -%}


#!/usr/sbin/nft -f
# Managed by SaltStack
flush ruleset

{%- for _family_name, _family in role.families|dictsort %}
{{- _block_wrap(_generate_family(_family_name, **_family), '\n') }}
{%- endfor %}
